id: supplemental_smartcard
title: Smartcard Supplemental
discussion: $OS_VALUE
check: ''
fix: ''
references:
  disa:
    cci:
      - N/A
    srg:
      - $OS_VALUE
    disa_stig:
      - $OS_VALUE
    sfr:
      - $OS_VALUE
  nist:
    800-53r5:
      - N/A
    800-53r4:
      - N/A
    cce:
      - $OS_VALUE
tags:
  - supplemental
mobileconfig: false
mobileconfig_info: null
os_specifics:
  macOS:
    '11.0':
      references:
        cce:
          - None
        disa_stig:
          - N/A
        srg:
          - N/A
        sfr:
          - N/A
      discussion: "The supplemental guidance found in this section is applicable for the following rules:\n\n  * auth_ssh_password_authentication_disable\n  * auth_smartcard_enforce\n  * auth_smartcard_certificate_trust_enforce_moderate\n  * auth_smartcard_certificate_trust_enforce_high\n  * auth_smartcard_allow\n  * auth_pam_sudo_smartcard_enforce\n  * auth_pam_su_smartcard_enforce\n  * auth_pam_login_smartcard_enforce\n\nmacOS supports smartcards, such as U.S. Personal Identity Verification (PIV) cards and U.S. Department of Defense Common Access Cards (CAC). Smartcards can be used on a macOS for the following:\n\n  * Authentication (Loginwindow, Screensaver, SSH, PKINIT, Safari, Finder, and PAM Authorization (`sudo`, `login`, and `su`) )\n  * Digital Encryption\n  * Digital Signing\n  * Remote Access (VPN:L2TP)\n  * Port-based Network Access Control (802.1X)\n  * Keychain Unlock\n\nmacOS has built-in support for USB CCID class-compliant smartcard readers.\n\n[discrete]\n==== Smartcard Pairing\nThe default method for using smartcards in macOS is a method called \"local account pairing\". Local account pairing is automatically initiated when a user inserts a smartcard into the Mac. The user is prompted to pair their smartcard with their account. If a user receives a new smartcard, the previous card must be unpaired, and the new card paired to the account. Local account pairing employs fixed key mapping with the hash of a public key on the user's smartcard with a local account.\n\n[discrete]\n==== Smartcard Attribute Mapping\nSmartcards can be used to authenticate against a directory via attribute mapping configured in `/private/etc/SmartcardLogin.plist`. This file takes precedence over local account pairing. Attribute mapping matches the configured certificate field values from the smart card to the value in a directory. This may be used with network accounts, mobile accounts, or local accounts.\n\n[discrete]\n==== Smartcard Management in macOS\n\nThe following settings are available to manage smartcards (com.apple.security.smartcard):\n\n[%header,cols=\"2,1,7\"]\n|===\n|Key\n|Type\n|Value\n\n<.^|userPairing\n^.^|bool\n|If false, users will not get the pairing dialog, although existing pairings will still work.\n\n<.^|allowSmartCard\n^.^|bool\n|If false, the SmartCard is disabled for logins, authorizations, and screensaver unlocking. It is still allowed for other functions, such as signing emails and web access. A restart is required for a change of setting to take effect.\n\n<.^|checkCertificateTrust\n^.^|int\na|Valid values are 0-3:\n\n- 0: certificate trust check is turned off\n\n- 1: certificate trust check is turned on. Standard validity check is being performed but this does not include additional revocation checks.\n\n- 2: certificate trust check is turned on, and a soft revocation check is performed. Until the certificate is explicitly rejected by CRL/OCSP, it is considered valid. This implies that unavailable/unreachable CRL/OCSP allows this check to succeed.\n\n- 3: certificate trust check is turned on, plus a hard revocation check is performed. Unless CRL/OCSP explicitly states that \u201Cthis certificate is OK\u201D, the certificate is considered invalid. This is the most secure value for this setting.\n\n<.^|oneCardPerUser\n^.^|bool\n|If true, a user can pair with only one smartcard, although existing pairings will be allowed if already set up.\n\n<.^|enforceSmartCard\n^.^|bool\n|If true, a user can only login or authenticate with a smartcard.\n\n<.^|tokenRemovalAction\n^.^|int\n|If 1, the screen saver will automatically when the smartcard is removed.\n\n<.^|allowUnmappedUsers\n^.^|int\n|If 1, allows users who are in a directory group to be exempt from smartcard-only enforcement. The group allowed for exemption is defined in /private/etc/SmartcardLogin.plist\n\n|===\n\nA custom configuration profile (`com.apple.loginwindow`) should be created to disable automatic login when FileVault is enabled. This ensures that authorized users boot their Macs, enter a password at the pre-boot screen (which decrypts the boot volume), and are then presented with a login window where they can authenticate with a smartcard.\n\n[%header,cols=\"2,1,7\"]\n|===\n|Key\n|Type\n|Value\n\n<.^|DisableFDEAutoLogin\n^.^|bool\n|If true, both Extensible Firmware Interface (EFI) login password and loginwindow PIN are required.\n\n|===\n\nNOTE: DisableFDEAutoLogin does not have to be set on Apple Silicon based macOS systems that are smartcard enforced as smartcards are available at pre-boot.\n\n[discrete]\n==== Trusted Authorities\nThe macOS allows users to specify which certificate authorities (CA) can be used for trust evaluation during smartcard authentication. Only CAs listed in the TrustedAuthorities section of the SmartcardLogin.plist will be evaluated as trusted. This setting only works if `checkCertificateTrust` is set to either 1, 2, or 3 in `com.apple.security.smartcard`.\n\nTo get the SHA-256 hash in the correct format, run the following command within terminal:\n[source,bash]\n----\n/usr/bin/openssl x509 -noout -fingerprint -sha256 -inform pem -in <issuer cert> | /usr/bin/awk -F '=' '{print $2}' |  /usr/bin/sed 's/://g'\n----\n\nTo configure Trusted Authorities, the `SmartcardLogin.plist` should be minimally configured as below:\n\n[source,xml]\n----\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n<dict>\n    <key>AttributeMapping</key>\n    <dict>\n          <key>fields</key>\n          <array>\n              <string>NT Principal Name</string>\n          </array>\n          <key>formatString</key>\n          <string>Kerberos:$1</string>\n          <key>dsAttributeString</key>\n          <string>dsAttrTypeStandard:AltSecurityIdentities</string>\n    </dict>\n    <key>TrustedAuthorities</key>\n  <array>\n      <string>SHA256_HASH_OF_CERTDOMAIN_1,SHA256_HASH_OF_CERTDOMAIN_2</string>\n  </array>\n</dict>\n</plist>\n----\n\n[discrete]\n==== Smartcard Enforcement Exemption\n\n[discrete]\n===== Group Exemption\n\nStarting in macOS 10.15, enforcement on a system can be granularly configured by adding a field to `/private/etc/SmartcardLogin.plist`. The `NotEnforcedGroup` can be added to the file to list a Directory group that will not be included in smartcard enforcement. In order to activate this feature, `enforceSmartCard` and `allowUnmappedUsers` must be applied via a configuration profile (`com.apple.security.smartcard`).\n\nTo configure the `NotEnforcedGroup`, the `SmartcardLogin.plist` should be minimally configured as follows:\n[source,xml]\n----\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n<dict>\n    <key>AttributeMapping</key>\n    <dict>\n          <key>fields</key>\n          <array>\n              <string>NT Principal Name</string>\n          </array>\n          <key>formatString</key>\n          <string>Kerberos:$1</string>\n          <key>dsAttributeString</key>\n          <string>dsAttrTypeStandard:AltSecurityIdentities</string>\n    </dict>\n    <key>TrustedAuthorities</key>\n  <array>\n      <string>SHA256_HASH_OF_CERTDOMAIN_1,SHA256_HASH_OF_CERTDOMAIN_2</string>\n  </array>\n    <key>NotEnforcedGroup</key>\n    <string>EXEMPTGROUP</key>\n</dict>\n</plist>\n----\n\nOnce a system is configured for the `NotEnforcedGroup` a user can be added to the assigned group by running the following:\n[source,bash]\n----\n/usr/sbin/dseditgroup -o edit -a <exempt_user> -t user <notenforcegroup>\n----\n\n[discrete]\n===== User Exemption\n\nAlternatively, if a single user needs to be exempt for a period of time, `kDSNativeAttrTypePrefix:SmartCardEnforcement` can be set in the user's Open Directory record. The following values can be set:\n\n* 0 - The system default is respected.\n* 1 - Smartcard enforcement is enabled.\n* 2 - Smartcard enforcement is disabled. \n\nNOTE: In Active Directory environments, the value of the `userAccountControl` attribute is respected.\n\nRun the following command to set the exemption when booted from macOS:\n[source,bash]\n----\n/usr/bin/dscl . -append /Users/<username> SmartCardEnforcement 2\n----\n\nRun the following command to set the exemption when booted from Recovery:\n[source,bash]\n----\n/usr/bin/defaults write /Volumes/Macintosh\\ HD/var/db/dslocal/nodes/Default/users/<username> SmartCardEnforcement -array-add 2\n----\nNOTE: When booted to recovery on an Apple Silicon Mac, run the following after setting the exemption.\n`/usr/sbin/diskutil apfs updatePreboot /Volumes/Macintosh\\ HD`\n\n[discrete]\n===== Temporary Exemption\n\nOn an Apple Silicon Mac, if a temporary exemption is needed, `security filevault skip-sc-enforcement` will disable smartcard enforcement on next boot only. \n\nRun the following command to set the temporary exemption when booted from Recovery:\n[source,bash]\n----\n/usr/bin/security filevault skip-sc-enforcement <data volume UUID> set\n----\n\nTo obtain the `data volume UUID` run the following:\n[source,bash]\n----\n/usr/sbin/diskutil apfs listGroups | /usr/bin/awk -F: '/ Data/ { getline; gsub(/ /,\"\"); print $2}'\n----\n\n[discrete]\n==== Pluggable Authentication Module (PAM)\n\nTerminal sessions in macOS can be configured for smartcard enforcement by modifying the PAM modules for `sudo`, `su`, and `login`.\n\n[source,bash]\n----\n/etc/pam.d/sudo\n# sudo: auth account password session\nauth        sufficient    pam_smartcard.so\nauth        required      pam_opendirectory.so\nauth        required      pam_deny.so\naccount     required      pam_permit.so\npassword    required      pam_deny.so\nsession     required      pam_permit.so\n----\n\n[source,bash]\n----\n/etc/pam.d/su\n# su: auth account password session\nauth        sufficient    pam_smartcard.so\nauth        required      pam_rootok.so\nauth        required      pam_group.so no_warn group=admin,wheel ruser root_only fail_safe\naccount     required      pam_permit.so\naccount     required      pam_opendirectory.so no_check_shell\npassword    required      pam_opendirectory.so\nsession     required      pam_launchd.so\n----\n\n[source,bash]\n----\n/etc/pam.d/login\n# login: auth account password session\nauth        sufficient    pam_smartcard.so\nauth        optional      pam_krb5.so use_kcminit\nauth        optional      pam_ntlm.so try_first_pass\nauth        optional      pam_mount.so try_first_pass\nauth        required      pam_opendirectory.so try_first_pass\nauth        required      pam_deny.so\naccount     required      pam_nologin.so\naccount     required      pam_opendirectory.so\npassword    required      pam_opendirectory.so\nsession     required      pam_launchd.so\nsession     required      pam_uwtmp.so\nsession     optional      pam_mount.so\n----\n\n[discrete]\n==== Screen Sharing and Screen Recording\nmacOS will disable support for TouchID, Watch, or Smartcard authentication when being watched or recorded. This can cause certain portions of the system to not recognize your smartcard. \n\nIn Unified Logging you'll notice an entry such as\n[source,bash]\n----\n2022-07-14 16:45:46.880038-0400 0x2F97 Info 0xC8D2 1600 SecurityAgent: (SecurityAgent) [com.apple.Authorization:SecurityAgent] Screen is being watched, no Touch ID, Watch or SmartCard support is allowed\n----\nThis can be remediated by writing the preference domain com.apple.authorization with the key ignoreARD.\n\n`defaults write com.apple.Authorization ignoreARD -bool true`\n\nOr applied system wide with a configuration profile named `com.apple.security.authorization.mobileconfig` in the project's `includes` folder.\n[source,xml]\n----\n<key>PayloadType</key>\n<string>com.apple.security.authorization</string>\n<key>ignoreArd</key>\n<true/>\n----  \n"
    '10.15':
      references:
        cce:
          - None
        disa_stig:
          - N/A
        srg:
          - N/A
        sfr:
          - N/A
      discussion: "The supplemental guidance found in this section is applicable for the following rules:\n\n  * auth_ssh_password_authentication_disable\n  * auth_smartcard_enforce\n  * auth_smartcard_certificate_trust_enforce_moderate\n  * auth_smartcard_certificate_trust_enforce_high\n  * auth_smartcard_allow\n  * auth_pam_sudo_smartcard_enforce\n  * auth_pam_su_smartcard_enforce\n  * auth_pam_login_smartcard_enforce\n\nmacOS supports smartcards, such as U.S. Personal Identity Verification (PIV) cards and U.S. Department of Defense Common Access Cards (CAC). Smartcards can be used on a macOS for the following:\n\n  * Authentication (Loginwindow, Screensaver, SSH, PKINIT, Safari, Finder, and PAM Authorization (`sudo`, `login`, and `su`) )\n  * Digital Encryption\n  * Digital Signing\n  * Remote Access (VPN:L2TP)\n  * Port-based Network Access Control (802.1X)\n  * Keychain Unlock\n\nmacOS has built-in support for USB CCID class-compliant smartcard readers.\n\n[discrete]\n==== Smartcard Pairing\nThe default method for using smartcards in macOS is a method called \"local account pairing\". Local account pairing is automatically initiated when a user inserts a smartcard into the Mac. The user is prompted to pair their smartcard with their account. If a user receives a new smartcard, the previous card must be unpaired, and the new card paired to the account. Local account pairing employs fixed key mapping with the hash of a public key on the user's smartcard with a local account.\n\n[discrete]\n==== Smartcard Attribute Mapping\nSmartcards can be used to authenticate against a directory via attribute mapping configured in `/private/etc/SmartcardLogin.plist`. This file takes precedence over local account pairing. Attribute mapping matches the configured certificate field values from the smart card to the value in a directory. This may be used with network accounts, mobile accounts, or local accounts.\n\n[discrete]\n==== Smartcard Management in macOS\n\nThe following settings are available to manage smartcards (com.apple.security.smartcard):\n\n[%header,cols=\"2,1,7\"]\n|===\n|Key\n|Type\n|Value\n\n<.^|userPairing\n^.^|bool\n|If false, users will not get the pairing dialog, although existing pairings will still work.\n\n<.^|allowSmartCard\n^.^|bool\n|If false, the SmartCard is disabled for logins, authorizations, and screensaver unlocking. It is still allowed for other functions, such as signing emails and web access. A restart is required for a change of setting to take effect.\n\n<.^|checkCertificateTrust\n^.^|int\na|Valid values are 0-3:\n\n- 0: certificate trust check is turned off\n\n- 1: certificate trust check is turned on. Standard validity check is being performed but this does not include additional revocation checks.\n\n- 2: certificate trust check is turned on, and a soft revocation check is performed. Until the certificate is explicitly rejected by CRL/OCSP, it is considered valid. This implies that unavailable/unreachable CRL/OCSP allows this check to succeed.\n\n- 3: certificate trust check is turned on, plus a hard revocation check is performed. Unless CRL/OCSP explicitly states that \u201Cthis certificate is OK\u201D, the certificate is considered invalid. This is the most secure value for this setting.\n\n<.^|oneCardPerUser\n^.^|bool\n|If true, a user can pair with only one smartcard, although existing pairings will be allowed if already set up.\n\n<.^|enforceSmartCard\n^.^|bool\n|If true, a user can only login or authenticate with a smartcard.\n\n<.^|tokenRemovalAction\n^.^|int\n|If 1, the screen saver will automatically when the smartcard is removed.\n\n<.^|allowUnmappedUsers\n^.^|int\n|If 1, allows users who are in a directory group to be exempt from smartcard-only enforcement. The group allowed for exemption is defined in /private/etc/SmartcardLogin.plist\n\n|===\n\nA custom configuration profile (`com.apple.loginwindow`) should be created to disable automatic login when FileVault is enabled. This ensures that authorized users boot their Macs, enter a password at the pre-boot screen (which decrypts the boot volume), and are then presented with a login window where they can authenticate with a smartcard.\n\n[%header,cols=\"2,1,7\"]\n|===\n|Key\n|Type\n|Value\n\n<.^|DisableFDEAutoLogin\n^.^|bool\n|If true, both Extensible Firmware Interface (EFI) login password and loginwindow PIN are required.\n\n|===\n\n[discrete]\n==== Trusted Authorities\nThe macOS allows users to specify which certificate authorities (CA) can be used for trust evaluation during smartcard authentication. Only CAs listed in the TrustedAuthorities section of the `SmartcardLogin.plist` will be evaluated as trusted. This setting only works if `checkCertificateTrust` is set to either 1, 2, or 3 in `com.apple.security.smartcard`.\n\nTo get the SHA-256 hash in the correct format, run the following command within terminal:\n[source,bash]\n----\n/usr/bin/openssl x509 -noout -fingerprint -sha256 -inform pem -in <issuer cert> | /usr/bin/awk -F '=' '{print $2}' |  /usr/bin/sed 's/://g'\n----\n\nTo configure Trusted Authorities, the `SmartcardLogin.plist` should be minimally configured as below:\n\n[source,xml]\n----\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n<dict>\n    <key>AttributeMapping</key>\n    <dict>\n          <key>fields</key>\n          <array>\n              <string>NT Principal Name</string>\n          </array>\n          <key>formatString</key>\n          <string>Kerberos:$1</string>\n          <key>dsAttributeString</key>\n          <string>dsAttrTypeStandard:AltSecurityIdentities</string>\n    </dict>\n    <key>TrustedAuthorities</key>\n  <array>\n      <string>SHA256_HASH_OF_CERTDOMAIN_1,SHA256_HASH_OF_CERTDOMAIN_2</string>\n  </array>\n</dict>\n</plist>\n----\n\n[discrete]\n==== Smartcard Enforcement Exemption\n\n[discrete]\n===== Group Exemption\n\nStarting in macOS 10.15, enforcement on a system can be granularly configured by adding a field to `/private/etc/SmartcardLogin.plist`. The `NotEnforcedGroup` can be added to the file to list a Directory group that will not be included in smartcard enforcement. In order to activate this feature, `enforceSmartCard` and `allowUnmappedUsers` must be applied via a configuration profile (`com.apple.security.smartcard`).\n\nTo configure the `NotEnforcedGroup`, the `SmartcardLogin.plist` should be minimally configured as follows:\n[source,xml]\n----\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n<dict>\n    <key>AttributeMapping</key>\n    <dict>\n          <key>fields</key>\n          <array>\n              <string>NT Principal Name</string>\n          </array>\n          <key>formatString</key>\n          <string>Kerberos:$1</string>\n          <key>dsAttributeString</key>\n          <string>dsAttrTypeStandard:AltSecurityIdentities</string>\n    </dict>\n    <key>TrustedAuthorities</key>\n  <array>\n      <string>SHA256_HASH_OF_CERTDOMAIN_1,SHA256_HASH_OF_CERTDOMAIN_2</string>\n  </array>\n    <key>NotEnforcedGroup</key>\n    <string>EXEMPTGROUP</key>\n</dict>\n</plist>\n----\n\nOnce a system is configured for the `NotEnforcedGroup` a user can be added to the assigned group by running the following:\n[source,bash]\n----\n/usr/sbin/dseditgroup -o edit -a <exempt_user> -t user <notenforcegroup>\n----\n\n[discrete]\n===== User Exemption\n\nAlternatively, if a single user needs to be exempt for a period of time, `kDSNativeAttrTypePrefix:SmartCardEnforcement` can be set in the user's Open Directory record. The following values can be set:\n\n* 0 - The system default is respected.\n* 1 - Smartcard enforcement is enabled.\n* 2 - Smartcard enforcement is disabled. \n\nNOTE: In Active Directory environments, the value of the `userAccountControl` attribute is respected.\n\nRun the following command to set the exemption when booted from macOS:\n[source,bash]\n----\n/usr/bin/dscl . -append /Users/<username> SmartCardEnforcement 2\n----\n\nRun the following command to set the exemption when booted from Recovery:\n[source,bash]\n----\n/usr/bin/defaults write /Volumes/Macintosh\\ HD/var/db/dslocal/nodes/Default/users/<username> SmartCardEnforcement -array-add 2\n----\n\n[discrete]\n==== Pluggable Authentication Module (PAM)\n\nTerminal sessions in macOS can be configured for smartcard enforcement by modifying the PAM modules for `sudo`, `su`, and `login`.\n\n[source,bash]\n----\n/etc/pam.d/sudo\n# sudo: auth account password session\nauth        sufficient    pam_smartcard.so\nauth        required      pam_opendirectory.so\nauth        required      pam_deny.so\naccount     required      pam_permit.so\npassword    required      pam_deny.so\nsession     required      pam_permit.so\n----\n\n[source,bash]\n----\n/etc/pam.d/su\n# su: auth account password session\nauth        sufficient    pam_smartcard.so\nauth        required      pam_rootok.so\nauth        required      pam_group.so no_warn group=admin,wheel ruser root_only fail_safe\naccount     required      pam_permit.so\naccount     required      pam_opendirectory.so no_check_shell\npassword    required      pam_opendirectory.so\nsession     required      pam_launchd.so\n----\n\n[source,bash]\n----\n/etc/pam.d/login\n# login: auth account password session\nauth        sufficient    pam_smartcard.so\nauth        optional      pam_krb5.so use_kcminit\nauth        optional      pam_ntlm.so try_first_pass\nauth        optional      pam_mount.so try_first_pass\nauth        required      pam_opendirectory.so try_first_pass\nauth        required      pam_deny.so\naccount     required      pam_nologin.so\naccount     required      pam_opendirectory.so\npassword    required      pam_opendirectory.so\nsession     required      pam_launchd.so\nsession     required      pam_uwtmp.so\nsession     optional      pam_mount.so\n----\n\n[discrete]\n==== Screen Sharing and Screen Recording\nmacOS will disable support for TouchID, Watch, or Smartcard authentication when being watched or recorded. This can cause certain portions of the system to not recognize your smartcard. \n\nIn Unified Logging you'll notice an entry such as\n[source,bash]\n----\n2022-07-14 16:45:46.880038-0400 0x2F97 Info 0xC8D2 1600 SecurityAgent: (SecurityAgent) [com.apple.Authorization:SecurityAgent] Screen is being watched, no Touch ID, Watch or SmartCard support is allowed\n----\nThis can be remediated by writing the preference domain com.apple.authorization with the key ignoreARD.\n\n`defaults write com.apple.Authorization ignoreARD -bool true`\n\nOr applied system wide with a configuration profile named `com.apple.security.authorization.mobileconfig` in the project's `includes` folder.\n[source,xml]\n----\n<key>PayloadType</key>\n<string>com.apple.security.authorization</string>\n<key>ignoreArd</key>\n<true/>\n----    \n"
    '12.0':
      references:
        cce:
          - None
        disa_stig:
          - N/A
        srg:
          - N/A
        sfr:
          - N/A
      discussion: "The supplemental guidance found in this section is applicable for the following rules:\n\n  * auth_ssh_password_authentication_disable\n  * auth_smartcard_enforce\n  * auth_smartcard_certificate_trust_enforce_moderate\n  * auth_smartcard_certificate_trust_enforce_high\n  * auth_smartcard_allow\n  * auth_pam_sudo_smartcard_enforce\n  * auth_pam_su_smartcard_enforce\n  * auth_pam_login_smartcard_enforce\n\nmacOS supports smartcards, such as U.S. Personal Identity Verification (PIV) cards and U.S. Department of Defense Common Access Cards (CAC). Smartcards can be used on a macOS for the following:\n\n  * Authentication (Loginwindow, Screensaver, SSH, PKINIT, Safari, Finder, and PAM Authorization (`sudo`, `login`, and `su`) )\n  * Digital Encryption\n  * Digital Signing\n  * Remote Access (VPN:L2TP)\n  * Port-based Network Access Control (802.1X)\n  * Keychain Unlock\n\nmacOS has built-in support for USB CCID class-compliant smartcard readers.\n\n[discrete]\n==== Smartcard Pairing\nThe default method for using smartcards in macOS is a method called \"local account pairing\". Local account pairing is automatically initiated when a user inserts a smartcard into the Mac. The user is prompted to pair their smartcard with their account. If a user receives a new smartcard, the previous card must be unpaired, and the new card paired to the account. Local account pairing employs fixed key mapping with the hash of a public key on the user's smartcard with a local account.\n\n[discrete]\n==== Smartcard Attribute Mapping\nSmartcards can be used to authenticate against a directory via attribute mapping configured in `/private/etc/SmartcardLogin.plist`. This file takes precedence over local account pairing. Attribute mapping matches the configured certificate field values from the smart card to the value in a directory. This may be used with network accounts, mobile accounts, or local accounts.\n\n[discrete]\n==== Smartcard Management in macOS\n\nThe following settings are available to manage smartcards (com.apple.security.smartcard):\n\n[%header,cols=\"2,1,7\"]\n|===\n|Key\n|Type\n|Value\n\n<.^|userPairing\n^.^|bool\n|If false, users will not get the pairing dialog, although existing pairings will still work.\n\n<.^|allowSmartCard\n^.^|bool\n|If false, the SmartCard is disabled for logins, authorizations, and screensaver unlocking. It is still allowed for other functions, such as signing emails and web access. A restart is required for a change of setting to take effect.\n\n<.^|checkCertificateTrust\n^.^|int\na|Valid values are 0-3:\n\n- 0: certificate trust check is turned off\n\n- 1: certificate trust check is turned on. Standard validity check is being performed but this does not include additional revocation checks.\n\n- 2: certificate trust check is turned on, and a soft revocation check is performed. Until the certificate is explicitly rejected by CRL/OCSP, it is considered valid. This implies that unavailable/unreachable CRL/OCSP allows this check to succeed.\n\n- 3: certificate trust check is turned on, plus a hard revocation check is performed. Unless CRL/OCSP explicitly states that \"this certificate is OK\", the certificate is considered invalid. This is the most secure value for this setting.\n\n<.^|oneCardPerUser\n^.^|bool\n|If true, a user can pair with only one smartcard, although existing pairings will be allowed if already set up.\n\n<.^|enforceSmartCard\n^.^|bool\n|If true, a user can only login or authenticate with a smartcard.\n\n<.^|tokenRemovalAction\n^.^|int\n|If 1, the screen saver will automatically when the smartcard is removed.\n\n<.^|allowUnmappedUsers\n^.^|int\n|If 1, allows users who are in a directory group to be exempt from smartcard-only enforcement. The group allowed for exemption is defined in /private/etc/SmartcardLogin.plist\n\n|===\n\nA custom configuration profile (`com.apple.loginwindow`) should be created to disable automatic login when FileVault is enabled. This ensures that authorized users boot their Macs, enter a password at the pre-boot screen (which decrypts the boot volume), and are then presented with a login window where they can authenticate with a smartcard.\n\n[%header,cols=\"2,1,7\"]\n|===\n|Key\n|Type\n|Value\n\n<.^|DisableFDEAutoLogin\n^.^|bool\n|If true, both Extensible Firmware Interface (EFI) login password and loginwindow PIN are required.\n\n|===\n\nNOTE: DisableFDEAutoLogin does not have to be set on Apple Silicon based macOS systems that are smartcard enforced as smartcards are available at pre-boot.\n\n[discrete]\n==== Trusted Authorities\nThe macOS allows users to specify which certificate authorities (CA) can be used for trust evaluation during smartcard authentication. Only CAs listed in the TrustedAuthorities section of the SmartcardLogin.plist will be evaluated as trusted. This setting only works if `checkCertificateTrust` is set to either 1, 2, or 3 in `com.apple.security.smartcard`.\n\nTo get the SHA-256 hash in the correct format, run the following command within terminal:\n[source,bash]\n----\n/usr/bin/openssl x509 -noout -fingerprint -sha256 -inform pem -in <issuer cert> | /usr/bin/awk -F '=' '{print $2}' |  /usr/bin/sed 's/://g'\n----\n\nTo configure Trusted Authorities, the `SmartcardLogin.plist` should be minimally configured as below:\n\n[source,xml]\n----\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n<dict>\n    <key>AttributeMapping</key>\n    <dict>\n          <key>fields</key>\n          <array>\n              <string>NT Principal Name</string>\n          </array>\n          <key>formatString</key>\n          <string>Kerberos:$1</string>\n          <key>dsAttributeString</key>\n          <string>dsAttrTypeStandard:AltSecurityIdentities</string>\n    </dict>\n    <key>TrustedAuthorities</key>\n  <array>\n      <string>SHA256_HASH_OF_CERTDOMAIN_1,SHA256_HASH_OF_CERTDOMAIN_2</string>\n  </array>\n</dict>\n</plist>\n----\n\n[discrete]\n==== Smartcard Enforcement Exemption\n\n[discrete]\n===== Group Exemption\n\nStarting in macOS 10.15, enforcement on a system can be granularly configured by adding a field to `/private/etc/SmartcardLogin.plist`. The `NotEnforcedGroup` can be added to the file to list a Directory group that will not be included in smartcard enforcement. In order to activate this feature, `enforceSmartCard` and `allowUnmappedUsers` must be applied via a configuration profile (`com.apple.security.smartcard`).\n\nTo configure the `NotEnforcedGroup`, the `SmartcardLogin.plist` should be minimally configured as follows:\n[source,xml]\n----\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n<dict>\n    <key>AttributeMapping</key>\n    <dict>\n          <key>fields</key>\n          <array>\n              <string>NT Principal Name</string>\n          </array>\n          <key>formatString</key>\n          <string>Kerberos:$1</string>\n          <key>dsAttributeString</key>\n          <string>dsAttrTypeStandard:AltSecurityIdentities</string>\n    </dict>\n    <key>TrustedAuthorities</key>\n  <array>\n      <string>SHA256_HASH_OF_CERTDOMAIN_1,SHA256_HASH_OF_CERTDOMAIN_2</string>\n  </array>\n    <key>NotEnforcedGroup</key>\n    <string>EXEMPTGROUP</key>\n</dict>\n</plist>\n----\n\nOnce a system is configured for the `NotEnforcedGroup` a user can be added to the assigned group by running the following:\n[source,bash]\n----\n/usr/sbin/dseditgroup -o edit -a <exempt_user> -t user <notenforcegroup>\n----\n\n[discrete]\n===== User Exemption\n\nAlternatively, if a single user needs to be exempt for a period of time, `kDSNativeAttrTypePrefix:SmartCardEnforcement` can be set in the user's Open Directory record. The following values can be set:\n\n* 0 - The system default is respected.\n* 1 - Smartcard enforcement is enabled.\n* 2 - Smartcard enforcement is disabled. \n\nNOTE: In Active Directory environments, the value of the `userAccountControl` attribute is respected.\n\nRun the following command to set the exemption when booted from macOS:\n[source,bash]\n----\n/usr/bin/dscl . -append /Users/<username> SmartCardEnforcement 2\n----\n\nRun the following command to set the exemption when booted from Recovery:\n[source,bash]\n----\n/usr/bin/defaults write /Volumes/Macintosh\\ HD/var/db/dslocal/nodes/Default/users/<username> SmartCardEnforcement -array-add 2\n----\nNOTE: When booted to recovery on an Apple Silicon Mac, run the following after setting the exemption.\n`/usr/sbin/diskutil apfs updatePreboot /Volumes/Macintosh\\ HD`\n\n[discrete]\n===== Temporary Exemption\n\nOn an Apple Silicon Mac, if a temporary exemption is needed, `security filevault skip-sc-enforcement` will disable smartcard enforcement on next boot only. \n\nRun the following command to set the temporary exemption when booted from Recovery:\n[source,bash]\n----\n/usr/bin/security filevault skip-sc-enforcement <data volume UUID> set\n----\n\nTo obtain the `data volume UUID` run the following:\n[source,bash]\n----\n/usr/sbin/diskutil apfs listGroups | /usr/bin/awk -F: '/ Data/ { getline; gsub(/ /,\"\"); print $2}'\n----\n\n[discrete]\n==== Pluggable Authentication Module (PAM)\n\nTerminal sessions in macOS can be configured for smartcard enforcement by modifying the PAM modules for `sudo`, `su`, and `login`.\n\n[source,bash]\n----\n/etc/pam.d/sudo\n# sudo: auth account password session\nauth        sufficient    pam_smartcard.so\nauth        required      pam_opendirectory.so\nauth        required      pam_deny.so\naccount     required      pam_permit.so\npassword    required      pam_deny.so\nsession     required      pam_permit.so\n----\n\n[source,bash]\n----\n/etc/pam.d/su\n# su: auth account password session\nauth        sufficient    pam_smartcard.so\nauth        required      pam_rootok.so\nauth        required      pam_group.so no_warn group=admin,wheel ruser root_only fail_safe\naccount     required      pam_permit.so\naccount     required      pam_opendirectory.so no_check_shell\npassword    required      pam_opendirectory.so\nsession     required      pam_launchd.so\n----\n\n[source,bash]\n----\n/etc/pam.d/login\n# login: auth account password session\nauth        sufficient    pam_smartcard.so\nauth        optional      pam_krb5.so use_kcminit\nauth        optional      pam_ntlm.so try_first_pass\nauth        optional      pam_mount.so try_first_pass\nauth        required      pam_opendirectory.so try_first_pass\nauth        required      pam_deny.so\naccount     required      pam_nologin.so\naccount     required      pam_opendirectory.so\npassword    required      pam_opendirectory.so\nsession     required      pam_launchd.so\nsession     required      pam_uwtmp.so\nsession     optional      pam_mount.so\n----\n\n[discrete]\n==== Screen Sharing and Screen Recording\nmacOS will disable support for TouchID, Watch, or Smartcard authentication when being watched or recorded. This can cause certain portions of the system to not recognize your smartcard. \n\nIn Unified Logging you'll notice an entry such as\n[source,bash]\n----\n2022-07-14 16:45:46.880038-0400 0x2F97 Info 0xC8D2 1600 SecurityAgent: (SecurityAgent) [com.apple.Authorization:SecurityAgent] Screen is being watched, no Touch ID, Watch or SmartCard support is allowed\n----\nThis can be remediated by writing the preference domain com.apple.authorization with the key ignoreARD.\n\n`defaults write com.apple.Authorization ignoreARD -bool true`\n\nOr applied system wide with a configuration profile named `com.apple.security.authorization.mobileconfig` in the project's `includes` folder.\n[source,xml]\n----\n<key>PayloadType</key>\n<string>com.apple.security.authorization</string>\n<key>ignoreArd</key>\n<true/>\n----  \n"
    '13.0':
      references:
        cce:
          - None
        disa_stig:
          - N/A
        srg:
          - N/A
        sfr:
          - N/A
      discussion: "The supplemental guidance found in this section is applicable for the following rules:\n\n  * auth_ssh_password_authentication_disable\n  * auth_smartcard_enforce\n  * auth_smartcard_certificate_trust_enforce_moderate\n  * auth_smartcard_certificate_trust_enforce_high\n  * auth_smartcard_allow\n  * auth_pam_sudo_smartcard_enforce\n  * auth_pam_su_smartcard_enforce\n  * auth_pam_login_smartcard_enforce\n\nmacOS supports smartcards, such as U.S. Personal Identity Verification (PIV) cards and U.S. Department of Defense Common Access Cards (CAC). Smartcards can be used on a macOS for the following:\n\n  * Authentication (Loginwindow, Screensaver, SSH, PKINIT, Safari, Finder, and PAM Authorization (`sudo`, `login`, and `su`) )\n  * Digital Encryption\n  * Digital Signing\n  * Remote Access (VPN:L2TP)\n  * Port-based Network Access Control (802.1X)\n  * Keychain Unlock\n\nmacOS has built-in support for USB CCID class-compliant smartcard readers.\n\n[discrete]\n==== Smartcard Pairing\nThe default method for using smartcards in macOS is a method called \"local account pairing\". Local account pairing is automatically initiated when a user inserts a smartcard into the Mac. The user is prompted to pair their smartcard with their account. If a user receives a new smartcard, the previous card must be unpaired, and the new card paired to the account. Local account pairing employs fixed key mapping with the hash of a public key on the user's smartcard with a local account.\n\n[discrete]\n==== Smartcard Attribute Mapping\nSmartcards can be used to authenticate against a directory via attribute mapping configured in `/private/etc/SmartcardLogin.plist`. This file takes precedence over local account pairing. Attribute mapping matches the configured certificate field values from the smart card to the value in a directory. This may be used with network accounts, mobile accounts, or local accounts.\n\n[discrete]\n==== Smartcard Management in macOS\n\nThe following settings are available to manage smartcards (com.apple.security.smartcard):\n\n[%header,cols=\"2,1,7\"]\n|===\n|Key\n|Type\n|Value\n\n<.^|userPairing\n^.^|bool\n|If false, users will not get the pairing dialog, although existing pairings will still work.\n\n<.^|allowSmartCard\n^.^|bool\n|If false, the SmartCard is disabled for logins, authorizations, and screensaver unlocking. It is still allowed for other functions, such as signing emails and web access. A restart is required for a change of setting to take effect.\n\n<.^|checkCertificateTrust\n^.^|int\na|Valid values are 0-3:\n\n- 0: certificate trust check is turned off\n\n- 1: certificate trust check is turned on. Standard validity check is being performed but this does not include additional revocation checks.\n\n- 2: certificate trust check is turned on, and a soft revocation check is performed. Until the certificate is explicitly rejected by CRL/OCSP, it is considered valid. This implies that unavailable/unreachable CRL/OCSP allows this check to succeed.\n\n- 3: certificate trust check is turned on, plus a hard revocation check is performed. Unless CRL/OCSP explicitly states that \"this certificate is OK\", the certificate is considered invalid. This is the most secure value for this setting.\n\n<.^|oneCardPerUser\n^.^|bool\n|If true, a user can pair with only one smartcard, although existing pairings will be allowed if already set up.\n\n<.^|enforceSmartCard\n^.^|bool\n|If true, a user can only login or authenticate with a smartcard.\n\n<.^|tokenRemovalAction\n^.^|int\n|If 1, the screen saver will automatically when the smartcard is removed.\n\n<.^|allowUnmappedUsers\n^.^|int\n|If 1, allows users who are in a directory group to be exempt from smartcard-only enforcement. The group allowed for exemption is defined in /private/etc/SmartcardLogin.plist\n\n|===\n\nA custom configuration profile (`com.apple.loginwindow`) should be created to disable automatic login when FileVault is enabled. This ensures that authorized users boot their Macs, enter a password at the pre-boot screen (which decrypts the boot volume), and are then presented with a login window where they can authenticate with a smartcard.\n\n[%header,cols=\"2,1,7\"]\n|===\n|Key\n|Type\n|Value\n\n<.^|DisableFDEAutoLogin\n^.^|bool\n|If true, both Extensible Firmware Interface (EFI) login password and loginwindow PIN are required.\n\n|===\n\nNOTE: DisableFDEAutoLogin does not have to be set on Apple Silicon based macOS systems that are smartcard enforced as smartcards are available at pre-boot.\n\n[discrete]\n==== Trusted Authorities\nThe macOS allows users to specify which certificate authorities (CA) can be used for trust evaluation during smartcard authentication. Only CAs listed in the TrustedAuthorities section of the SmartcardLogin.plist will be evaluated as trusted. This setting only works if `checkCertificateTrust` is set to either 1, 2, or 3 in `com.apple.security.smartcard`.\n\nTo get the SHA-256 hash in the correct format, run the following command within terminal:\n[source,bash]\n----\n/usr/bin/openssl x509 -noout -fingerprint -sha256 -inform pem -in <issuer cert> | /usr/bin/awk -F '=' '{print $2}' |  /usr/bin/sed 's/://g'\n----\n\nTo configure Trusted Authorities, the `SmartcardLogin.plist` should be minimally configured as below:\n\n[source,xml]\n----\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n<dict>\n    <key>AttributeMapping</key>\n    <dict>\n          <key>fields</key>\n          <array>\n              <string>NT Principal Name</string>\n          </array>\n          <key>formatString</key>\n          <string>Kerberos:$1</string>\n          <key>dsAttributeString</key>\n          <string>dsAttrTypeStandard:AltSecurityIdentities</string>\n    </dict>\n    <key>TrustedAuthorities</key>\n  <array>\n      <string>SHA256_HASH_OF_CERTDOMAIN_1,SHA256_HASH_OF_CERTDOMAIN_2</string>\n  </array>\n</dict>\n</plist>\n----\n\n[discrete]\n==== Smartcard Enforcement Exemption\n\n[discrete]\n===== Group Exemption\n\nStarting in macOS 10.15, enforcement on a system can be granularly configured by adding a field to `/private/etc/SmartcardLogin.plist`. The `NotEnforcedGroup` can be added to the file to list a Directory group that will not be included in smartcard enforcement. In order to activate this feature, `enforceSmartCard` and `allowUnmappedUsers` must be applied via a configuration profile (`com.apple.security.smartcard`).\n\nTo configure the `NotEnforcedGroup`, the `SmartcardLogin.plist` should be minimally configured as follows:\n[source,xml]\n----\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n<dict>\n    <key>AttributeMapping</key>\n    <dict>\n          <key>fields</key>\n          <array>\n              <string>NT Principal Name</string>\n          </array>\n          <key>formatString</key>\n          <string>Kerberos:$1</string>\n          <key>dsAttributeString</key>\n          <string>dsAttrTypeStandard:AltSecurityIdentities</string>\n    </dict>\n    <key>TrustedAuthorities</key>\n  <array>\n      <string>SHA256_HASH_OF_CERTDOMAIN_1,SHA256_HASH_OF_CERTDOMAIN_2</string>\n  </array>\n    <key>NotEnforcedGroup</key>\n    <string>EXEMPTGROUP</key>\n</dict>\n</plist>\n----\n\nOnce a system is configured for the `NotEnforcedGroup` a user can be added to the assigned group by running the following:\n[source,bash]\n----\n/usr/sbin/dseditgroup -o edit -a <exempt_user> -t user <notenforcegroup>\n----\n\n[discrete]\n===== User Exemption\n\nAlternatively, if a single user needs to be exempt for a period of time, `kDSNativeAttrTypePrefix:SmartCardEnforcement` can be set in the user's Open Directory record. The following values can be set:\n\n* 0 - The system default is respected.\n* 1 - Smartcard enforcement is enabled.\n* 2 - Smartcard enforcement is disabled. \n\nNOTE: In Active Directory environments, the value of the `userAccountControl` attribute is respected.\n\nRun the following command to set the exemption when booted from macOS:\n[source,bash]\n----\n/usr/bin/dscl . -append /Users/<username> SmartCardEnforcement 2\n----\n\nRun the following command to set the exemption when booted from Recovery:\n[source,bash]\n----\n/usr/bin/defaults write /Volumes/Macintosh\\ HD/var/db/dslocal/nodes/Default/users/<username> SmartCardEnforcement -array-add 2\n----\nNOTE: When booted to recovery on an Apple Silicon Mac, run the following after setting the exemption.\n`/usr/sbin/diskutil apfs updatePreboot /Volumes/Macintosh\\ HD`\n\n[discrete]\n===== Temporary Exemption\n\nOn an Apple Silicon Mac, if a temporary exemption is needed, `security filevault skip-sc-enforcement` will disable smartcard enforcement on next boot only. \n\nRun the following command to set the temporary exemption when booted from Recovery:\n[source,bash]\n----\n/usr/bin/security filevault skip-sc-enforcement <data volume UUID> set\n----\n\nTo obtain the `data volume UUID` run the following:\n[source,bash]\n----\n/usr/sbin/diskutil apfs listGroups | /usr/bin/awk -F: '/ Data/ { getline; gsub(/ /,\"\"); print $2}'\n----\n\n[discrete]\n==== Pluggable Authentication Module (PAM)\n\nTerminal sessions in macOS can be configured for smartcard enforcement by modifying the PAM modules for `sudo`, `su`, and `login`.\n\n[source,bash]\n----\n/etc/pam.d/sudo\n# sudo: auth account password session\nauth        sufficient    pam_smartcard.so\nauth        required      pam_opendirectory.so\nauth        required      pam_deny.so\naccount     required      pam_permit.so\npassword    required      pam_deny.so\nsession     required      pam_permit.so\n----\n\n[source,bash]\n----\n/etc/pam.d/su\n# su: auth account password session\nauth        sufficient    pam_smartcard.so\nauth        required      pam_rootok.so\nauth        required      pam_group.so no_warn group=admin,wheel ruser root_only fail_safe\naccount     required      pam_permit.so\naccount     required      pam_opendirectory.so no_check_shell\npassword    required      pam_opendirectory.so\nsession     required      pam_launchd.so\n----\n\n[source,bash]\n----\n/etc/pam.d/login\n# login: auth account password session\nauth        sufficient    pam_smartcard.so\nauth        optional      pam_krb5.so use_kcminit\nauth        optional      pam_ntlm.so try_first_pass\nauth        optional      pam_mount.so try_first_pass\nauth        required      pam_opendirectory.so try_first_pass\nauth        required      pam_deny.so\naccount     required      pam_nologin.so\naccount     required      pam_opendirectory.so\npassword    required      pam_opendirectory.so\nsession     required      pam_launchd.so\nsession     required      pam_uwtmp.so\nsession     optional      pam_mount.so\n----\n\n[discrete]\n==== Screen Sharing and Screen Recording\nmacOS will disable support for TouchID, Watch, or Smartcard authentication when being watched or recorded. This can cause certain portions of the system to not recognize your smartcard. \n\nIn Unified Logging you'll notice an entry such as\n[source,bash]\n----\n2022-07-14 16:45:46.880038-0400 0x2F97 Info 0xC8D2 1600 SecurityAgent: (SecurityAgent) [com.apple.Authorization:SecurityAgent] Screen is being watched, no Touch ID, Watch or SmartCard support is allowed\n----\nThis can be remediated by writing the preference domain com.apple.authorization with the key ignoreARD.\n\n`defaults write com.apple.Authorization ignoreARD -bool true`\n\nOr applied system wide with a configuration profile named `com.apple.security.authorization.mobileconfig` in the project's `includes` folder.\n[source,xml]\n----\n<key>PayloadType</key>\n<string>com.apple.security.authorization</string>\n<key>ignoreArd</key>\n<true/>\n----  \n"
