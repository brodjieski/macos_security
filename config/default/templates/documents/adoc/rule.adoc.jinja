{% set check_tags = ["permanent", "inherent", "n_a", "not_applicable"] %}
{% set additional_info = rule | get_nested(["platforms", rule.os_type, "enforcement_info", "fix", "additional_info"]) %}
{% set check_shell = rule | get_nested(["platforms", rule.os_type, "enforcement_info", "check", "shell"]) %}
{% set fix_shell = rule | get_nested(["platforms", rule.os_type, "enforcement_info", "fix", "shell"]) %}
=== {{ rule.title }}

{% if rule.tags is defined or rule.tags is not none  and "supplemental" in rule.tags %}
{{ rule.discussion | include_replace }}
{% else %}
{{ rule.discussion }}
{% endif %}

{% if rule.mechanism == "manual" %}
:grey_exclamation: {% trans %} This rule is marked as manual and may not be able to be automated. It is also excluded in the compliance scan and will not report any results. {% endtrans %}
{% endif -%}

{% if not rule.tags | select('in', check_tags) | list %}
{# {% if not "supplemental" in rule.tags %} #}
{% if rule.tags is not defined or rule.tags is none or "supplemental" not in rule.tags %}
{% if rule.os_name == "macos" %}
{% trans %}To check the state of the system, run the following command(s){% endtrans %}:
[source,bash,options="nowrap"]
----
{% if check_shell is not none %}
{{ check_shell }}
{% else %}
{{ rule.check | replace("\\\\", "\\") | replace('\\"', '"') | trim | safe }}
{% endif %}
----
{% else %}
{{ rule.check if rule.check is not none }}
{% endif %}

{% if rule.os_name == "macos" %}
{% trans %}If the result is not{% endtrans %} _{{ rule.result_value }}_, {% trans %}this is a finding{% endtrans %}.
{% endif %}

====
**{% trans %}Remediation Description{% endtrans %}**

{% if rule.fix is not none %}
{% trans %}Perform the following to configure the system to meet the requirements{% endtrans %}:
{% endif %}

{% if rule.mobileconfig_info is none and rule.fix is not none or fix_shell %}
{% trans %}To check the state of the system, run the following command(s){% endtrans %}:

[source,bash,options="nowrap"]
----
{{ rule.fix if rule.fix is not none else fix_shell }}
----

{% elif additional_info is not none %}
{{ additional_info }}
{% elif rule.mobileconfig_info is not none and fix_shell %}
{% if fix_shell %}
[source,bash,options="nowrap"]
----
{{ fix_shell -}}
----
{% endif %}

{% if rule.mobileconfig_info %}
[source,xml]
----
{{ rule.mobileconfig_info | mobileconfig_payloads_to_xml -}}
----
{% endif %}
{% else %}
{% if rule.os_name == "macos" %}
{{ rule.fix }}
{% else %}
[source,xml]
----
{{ rule.mobileconfig_info | mobileconfig_payloads_to_xml -}}
----
{% endif %}
{% endif %}
{% endif %}
====
{% endif %}

[cols="15%h, 85%a"]
|===

|ID
|{{ rule.rule_id }}
{{ rule.severity if rule.severity is not none and rule.tags not in check_tags }}

|{% trans %}References{% endtrans %}
|

[cols="20%h,80%a"]
[frame="none"]
[grid="cols"]
!===

!800-53r5
!
{{ rule.references.nist.nist_800_53r5 | group_ulify if rule.references.nist.nist_800_53r5 is not none }}

ifdef::show_171[]
!800-171r3
!
{{ rule.references.nist.nist_800_171r3 | render_rules if rule.references.nist.nist_800_171r3 is not none }}
endif::[]

ifdef::show_STIG[]
!DISA STIG(s)
!
{{ rule.references.disa.disa_stig | render_rules if rule.references.disa.disa_stig is not none }}
{% if rule.references.disa.sfr is not none %}
!SFR
!
{{ rule.references.disa.sfr | render_rules if rule.references.disa.sfr is not none }}
{% endif %}
endif::[]

ifdef::show_CIS[]
!CIS Benchmark
!
{{ rule.references.cis.benchmark | render_rules if rule.references.cis.benchmark is not none }}

!CIS Controls V8
!
{{ rule.references.cis.controls_v8 | render_rules if rule.references.cis.controls_v8 is not none }}
endif::[]

ifdef::show_indigo[]
!indigo
!
{{ rule.references.bsi.indigo | render_rules if rule.references.bsi.indigo is not none }}
endif::[]

ifdef::show_CMMC[]
!CMMC
!
{{ rule.references.disa.cmmc | render_rules if rule.references.disa.cmmc is not none }}
endif::[]

{% if rule.references.nist.cce is not none %}
!CCE
!
{{ rule.references.nist.cce | render_rules if rule.references.nist.cce is not none }}
{% endif %}

{% if custom %}
! Custom References
!
{{ rule.references.custom_refs | render_rules if rule.references.custom_refs is not none }}
{% endif %}

ifdef::show_tags[]
!TAGS
!
{{ rule.tags | render_rules if rule.tags is not none }}
endif::[]

!===

|
|===
